{"name":"Tomcat-custom-env","tagline":"Tomcat Custom Configuration Example","body":"tomcat-custom-env\r\n=================\r\n\r\nTomcat Custom Configuration Example.\r\n\r\n# Establishing Customizable Tomcat Configuration\r\n\r\nDeploying to [Apache Tomcat](http://tomcat.apache.org) often requires modifying it's default configuration. \r\nThe changes are often environment specific and it should be avoided to change default tomcat configuration.\r\nAlso, when upgrading a Tomcat to new version you need to be sure that all your custom changes have not been lost and were applied to new configuration.\r\n\r\nHopefully, Tomcat supports the concept of separation of the configuration.\r\n\r\n[Download](https://github.com/kpavlov/tomcat-custom-env/archive/master.zip) this project.\r\nYou may find a shell script [install.sh](https://github.com/kpavlov/tomcat-custom-env/blob/master/install.sh) which creates minimal custom tomcat configuraiton. \r\n\r\nA step-by-step instruction you may find below.\r\n\r\n## 1. Installing tomcat\r\nYou download Tomcat distribution binary and extract it to some folder.\r\nI put it to `~/java/apache-tomcat-7.0.52`.\r\nIt is desirable to create a symlink to it. It would allow to switch to another version of tomcat without changing your scripts\r\n    \r\n    ln -s ~/java/apache-tomcat-7.0.52 ~/java/tomcat\r\n    \r\nAs alternative, you may install a tomcat from packages.\r\n\r\n## 2. Create a folder to keep your custom configuration\r\n\r\n1. Create a folder where you custom configuration will be located.\r\n  \r\n    mkdir -p ~/java/custom-tomcat/{bin,conf,logs,work,webapps,temp}\r\n\r\n2. Copy default `server.xml`, `tomcat-users.xml` configuration file to custom location. If you already have a customized `server.xml` then put it there\r\n         \r\n\tcp -v ~/java/tomcat/conf/server.xml ~/java/tomcat/conf/tomcat-users.xml ~/java/custom-tomcat/conf/\r\n\r\n3. Set system property `$CATALINA_BASE` referring to base directory for resolving dynamic portions of a Catalina installation. \r\n   \r\n     export CATALINA_BASE=\"~/java/custom-tomcat\"\r\n\r\nNow you can start the Tomcat and see that it uses your custom configuration folder:\r\n\r\n    $ ./catalina.sh run\r\n    Using CATALINA_BASE:   /Users/maestro/java/custom-tomcat \r\n    Using CATALINA_HOME:   /Users/maestro/java/tomcat\r\n    Using CATALINA_TMPDIR: /Users/maestro/java/custom-tomcat/temp\r\n    ...\r\n \r\n## 3. Tomcat runtime parameters customization\r\n \r\nTo specify JVM options to be used when tomcat server is run, create a bash script `$CATALINA_BASE/bin/setenv.sh`. \r\nIt will keep environment variables referred in `catalina.sh` script to keep your customizations separate.\r\n\r\nDefine `$CATALINA_OPTS` inside `setenv.sh`.  Include here and not in JAVA_OPTS all options, that should only be used by Tomcat itself, not by the stop process, the version command etc. \r\nExamples are heap size, GC logging, JMX ports etc.\r\n\r\nExample `setenv.sh`:\r\n\r\n    echo \"Setting parameters from $CATALINA_BASE/bin/setenv.sh\"\r\n    echo \"_______________________________________________\"\r\n    \r\n    export CATALINA_OPTS=\"$CATALINA_OPTS -Xms1024m\"\r\n\r\n    export CATALINA_OPTS=\"$CATALINA_OPTS -Xmx1025m\"\r\n    \r\n    export CATALINA_OPTS=\"$CATALINA_OPTS -XX:MaxPermSize=256m\"\r\n    \r\n    export CATALINA_OPTS=\"$CATALINA_OPTS -XX:+UseParallelGC\"\r\n    \r\n    export CATALINA_OPTS=\"$CATALINA_OPTS -server\"\r\n    \r\n    export CATALINA_OPTS=\"$CATALINA_OPTS -XX:+DisableExplicitGC\"\r\n    \r\n    # Check for application specific parameters at startup\r\n    if [ -r \"$CATALINA_BASE/bin/appenv.sh\" ]; then\r\n      . \"$CATALINA_BASE/bin/appenv.sh\"\r\n    fi\r\n     \r\n    echo \"Using CATALINA_OPTS:\"\r\n    for arg in $CATALINA_OPTS\r\n    do\r\n        echo \">> \" $arg\r\n    done\r\n    echo \"\"\r\n     \r\n    echo \"Using JAVA_OPTS:\"\r\n    for arg in $JAVA_OPTS\r\n    do\r\n        echo \">> \" $arg\r\n    done\r\n    \r\n    export JAVA_ENDORSED_DIRS=\"$CATALINA_BASE/endorsed:$CATALINA_HOME/endorsed\"\r\n    \r\n    echo \"_______________________________________________\"\r\n    echo \"\"\r\n        \r\n\r\n\r\n## 4. Adding Common Libraries\r\n\r\n1. Shared Libraries\r\nCommon libraries added to `$CATALINA_BASE/lib` directory are globally accessable.\r\n\r\n2. Java Endorsed Directories\r\nBy Java documentation, `java.endorsed.dirs` is used to provide an Endorsed Standards Override Mechanism. Which means, a user can provide newer versions of certain packages than those provided by the JDK.\r\nThis is a place where you may place a JDBC driver or some replacements for APIs created outside of the JCP (i.e. DOM and SAX from W3C) \r\nTomcat by default provides set `java.endorsed.dirs=$CATALINA_HOME/endorsed` but in setenv.sh additional locaton is added: `$CATALINA_BASE/endorsed`\r\n\r\n## 5. Using Logback for Logging\r\n\r\nTomcat is configured to use Apache Commons Logging API by default.\r\nIf you are using [slf4j][slf4j] in your application and familiar with [Logback][logback], then it is reasonable to migrate your tomcat configuration to logback too.\r\n\r\nCurrent configuration is using JCL-to-SLF4j bridge and the Logback for logging.\r\nLogback configuration files are `$CATALINA_BASE/conf/logback-access.xml` for access logs and `$CATALINA_BASE/conf/logback.xml` for application logs.\r\n\r\n\r\n## Links\r\n\r\n- http://hwellmann.blogspot.com/2012/11/logging-with-slf4j-and-logback-in.html\r\n- https://gist.github.com/terrancesnyder/986029 - example setenv.sh with defaults set for minimal time spent in garbage collection\r\n- http://terranceasnyder.com/2011/05/tomcat-best-practices/ - Tomcat Best Practices\r\n \r\n\r\n  [slf4j]: http://slf4j.org\r\n  [logback]: http://logback.qos.ch\r\n","google":"UA-2530248-20","note":"Don't delete this file! It's used internally to help with page regeneration."}